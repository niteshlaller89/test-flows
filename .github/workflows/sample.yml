# This is a basic workflow to help you get started with Actions

name: CI

# Controls when the workflow will run
on:
  # Triggers the workflow on push or pull request events but only for the "main" branch
  push:
    branches: [ "main" ]
  pull_request:
    branches: [ "main" ]

  # Allows you to run this workflow manually from the Actions tab
  workflow_dispatch:

defaults:
  run:
    shell: bash
    working-directory: projects/edu

# A workflow run is made up of one or more jobs that can run sequentially or in parallel
jobs:
  # This workflow contains a single job called "build"
  build:
    # The type of runner that the job will run on
    runs-on: ubuntu-latest

    # Steps represent a sequence of tasks that will be executed as part of the job
    steps:
      # Checks-out your repository under $GITHUB_WORKSPACE, so your job can access it
      - uses: actions/checkout@v3

      # Runs a single command using the runners shell
      - name: Run a one-line script
        env:
          REF: ${{ github.ref }}
          HEAD_REF: ${{ github.head_ref }}
          BASE_REF: ${{ github.base_ref }}
          REFNAME: ${{ github.ref_name }}
        run: |
          echo Hello, world!
          echo Ref: $REF 
          echo Head Ref: $HEAD_REF
          echo Base Ref: $BASE_REF
          echo Ref Name: $REFNAME
          pwd
      # Runs a set of commands using the runners shell
      - name: Run a multi-line script
        run: |
          echo Add other actions to build,
          echo test, and deploy your project.
          pwd

  run-smoke-tests:
    concurrency:
      group: ${{ github.workflow }}-${{ github.head_ref }}
      cancel-in-progress: true
    needs: [build]
    runs-on: ubuntu-latest
    outputs:
      status_url: ${{ steps.smoke_deployment.outputs.status_url }}
      deployment_status: ${{ steps.await_deployment.outputs.deployment_status }}
    steps:
      - name: Check out repository
        uses: actions/checkout@v3
      - name: Trigger Smoke Deployment
        id: smoke_deployment
        run: |
          echo /repos/${OWNER}/${REPO}/deployments Branch: ${BRANCH} Github Ref: ${GITHUB_REF} 
          status_url="$(gh api --method POST -H "Accept: application/vnd.github+json" \
          /repos/$OWNER/$REPO/deployments \
          -f ref=$BRANCH \
          -F auto_merge=false \
          -F required_contexts[]='build' \
          -f environment='dev' \
          -f payload='{ "deploy": "smoke tests" }' \
          -f description='Deployment on dev env' \
          --jq '.data.statuses_url')"
          echo "::set-output name=status_url::status_url"
        env:
          OWNER: ${{ github.repository_owner }}
          REPO: ${{ github.event.repository.name }}
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          BRANCH: ${{ github.head_ref }}
        shell: bash
      - name: "Await smoke deployment"
        id: await_deployment
        run: |
          COMMIT_STATUS="pending"
          echo $steps.smoke_deployment.outputs.status_url
          STATUSES=$(curl -s $steps.smoke_deployment.outputs.status_url  | jq -r 'length')
          echo "Statuses: $STATUSES"
          if [ $STATUSES == 0 ]; then
              echo "Not deployment found"
              echo "::set-output name=deployment_status::none"
          else
              until [ "$COMMIT_STATUS" == "success" ] || [ "$COMMIT_STATUS" == "failure" ]; do
                ENV_URL=$(curl -s $steps.smoke_deployment.outputs.status_url  | jq -r '.[0].target_url')
                COMMIT_STATUS=$(curl -s $steps.smoke_deployment.outputs.status_url  | jq -r '.[0].state')
              done
              echo "Environment deployed. Finished."
              echo "::set-output name=deployment_status::success"
          fi
      - uses: ./.github/actions/smoke-tests


